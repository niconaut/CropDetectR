knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message=F,
warning=F
)
devtools::load_all()
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
img_grayscale <- make_ExG(img)
plot(img)
plot(img_grayscale)
black_white <- make_bw(img_grayscale)
plot(black_white)
img_blob <- blobify(black_white, 3)
plot(img_blob)
img_blob <- blobify(black_white, 3)
plot(img_blob)
rotations_list <- rotations(img_blob, 90)
plot(rotations_list)
jagged <- as.data.frame(rotations_list[1]) %>%
select(x,y,value) %>%
group_by(x) %>%
summarise(row_threshold = mean(value))
jagged_array <- as.array(jagged$row_threshold)
plot(jagged_array, type = 'l')
smooth <- smoothing(rotations_list[1], 0.25)
plot(smooth, type = 'l')
best_img <- best_rotation(rotations_list, 0.5, 0.25)
paste("The best rotation was rotation ", best_img - 1, ".", sep = "")
plot(smoothing(rotations_list[best_img], 0.25), type = 'l')
best_img <- best_rotation(rotations_list, 0.5, 0.25)
paste("The best rotation was rotation ", best_img - 1, ".", sep = "")
plot(smoothing(rotations_list[best_img], 0.25), type = 'l')
picture_list <- rotations_list
crop_rows <- crop_row_finder(rotations_list, 0.5, 0.05, 0.25)
plot(smoothing(rotations_list[best_img], 0.25), type = 'l')
abline(v = crop_rows, col = "red")
plot(img)
abline(v = crop_rows, col = "red", lwd = 1.5)
picture_list <- rotations_list
crop_rows <- crop_row_finder(rotations_list, 0.5, 0.05, 0.25)
plot(smoothing(rotations_list[best_img], 0.25), type = 'l')
abline(v = crop_rows, col = "red")
plot(img)
abline(v = crop_rows, col = "red", lwd = 1.5)
devtools::load_all()
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img_blob <- blobify(black_white, 3)
plot(img_blob)
library(devtools)
check()
knitr::opts_chunk$set(echo = TRUE)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
# img_3 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_3.JPG')
# img_4 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_4.JPG')
# img_5 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_5.JPG')
# img_6 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_6.JPG')
# img_7 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_7.JPG')
# img_8 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_8.JPG')
# img_9 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_9.JPG')
# img_10 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_10.JPG')
# img_11 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_11.JPG')
# img_12 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_12.JPG')
# img_13 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_13.JPG')
# img_14 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_14.JPG')
# img_15 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_15.JPG')
# img_16 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_16.JPG')
# img_17 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_17.JPG')
# img_18 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_18.JPG')
# img_20 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_20.JPG')
# img_21 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_21.JPG')
# img_22 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_22.JPG')
# img_23 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_23.JPG')
# img_24 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_24.JPG')
# img_25 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_25.JPG')
img_26 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
# img_29 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_29.JPG')
# img_30 <- load.image('C:/Users/Nico/Desktop/UNOwork/img_30.JPG')
# GRAYSCALE IMAGE USING ExG
make_ExG <- function(color_image) {
df_field <- as.data.frame(color_image, wide="c")
df_field <- df_field %>%
mutate(r_small = c.1/(c.1 + c.2 + c.3)) %>%
mutate(g_small = c.2/(c.1 + c.2 + c.3)) %>%
mutate(b_small = c.3/(c.1 + c.2 + c.3))
df_field <- df_field %>%
mutate(ExG = 2*g_small - r_small - b_small)
df_bw <- df_field %>%
dplyr::select(c("x","y","ExG"))
df_bw <- melt(df_bw, id = c("x","y"))
names(df_bw)[3] <- "cc"
df_bw %>%
filter(is.na(value))
df_bw <- na.omit(df_bw)
df_bw$cc <- as.integer(df_bw$cc)
df_bw <- Image(df_bw$value, dim = c(max(df_bw$x),max(df_bw$y)), colormode = 'Grayscale')
return(df_bw)
}
# RETURNS THE OTSU THRESHOLDING IMAGE
make_bw <- function(image){
BW <- image > otsu(image, range = c(max(image),min(image)))
return(BW)
}
# TURNS THE OTSU IMAGE INTO THE MORPHOLOGY IMAGE - no less than 3
blobify <- function(image,size) {
kern3 <- makeBrush(size, shape = 'box')
open1 <- opening(image, kern3)
close1 <- closing(open1, kern3)
kern4 <- makeBrush(size + 2, shape = 'box')
open2 <- opening(close1, kern4)
close2 <- closing(open2, kern3)
open3 <- opening(close2, kern4)
close3 <- closing(open3, kern4)
final_blob <- EBImage::dilate(close3, kern3)
as.cimg()
final_blob <- as.cimg(final_blob) # getting it ready for the rest of the functions
return(final_blob)
}
# ROTATES IMAGES
rotations <- function(picture, degrees) {
new_deg <- 0
rotated <- imrotate(picture, new_deg)
picture_list<- rotated
# rotation_list <- paste('rotated_',new_deg,sep = "")
while (new_deg < (360 - degrees)) {
new_deg <- new_deg + degrees
rotated <- imrotate(picture, new_deg)
picture_list <- ci(picture_list, rotated)
# rotation_list <- append(rotation_list, paste('rotated_', new_deg, sep = ""))
}
# return(rotation_list)
return(picture_list)
}
# FINDS THE LOCAL MAX/MIN'S
localMaxima <- function(x) {
# Use Inf instead if x is numeric (non-integer)
y <- diff(c(-.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
localMinima <- function(x) {
# Use Inf instead if x is numeric (non-integer)
y <- diff(c(.Machine$integer.max, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
# SMOOTHING OF THE FUNCTIONS - 0.25 intensity
smoothing <- function(picture, intensity) {
BW_df <- as.data.frame(picture) %>%
select(x, y, value) %>%
group_by(x) %>%
summarise(row_threshold = mean(value))
y <- as.array(BW_df$row_threshold)
smoothed <- smooth.spline(BW_df$x,y,spar = intensity)
y_smooth <- smoothed$y
return(y_smooth)
# ggplot(BW_df, aes(smoothed$x, smoothed$y)) + geom_line()
}
# FINDS THE BEST ROTATION (IMAGE WITH THE MOST VERTICAL CROP ROWS)
best_rotation <- function(picture_list, ratio, intensity) {
good_ratios <- NULL
for (i in 1:length(picture_list)) {
y_smooth <- smoothing(picture_list[i], intensity)
peaks <- localMaxima(y_smooth)
valleys <- localMinima(y_smooth)
crop_rows <- NULL
for (i in 1:length(peaks)) {
right_ratio <- round(abs((y_smooth[peaks[i]]-y_smooth[min(valleys[valleys >= peaks[i]])])/(max(y_smooth))),5)
left_ratio <- round(abs((y_smooth[peaks[i]]-y_smooth[max(valleys[valleys <= peaks[i]])])/(max(y_smooth))),5)
if ((!is.na(left_ratio) & !is.na(right_ratio)) & (left_ratio > (ratio) & right_ratio > (ratio))) {
crop_rows[i] <- peaks[i]
}
}
good_ratios <- c(good_ratios,length(na.omit(crop_rows)))
}
return(which.max(good_ratios))
}
# USES THE BEST ROTATION TO FIND OPTIMAL X COORDINATES OF THE CROP ROWS
crop_lines <- function(picture_list, final_ratio, best_image, intensity) {
crop_ratios <- NULL
for (i in 1:length(picture_list)) {
crop_smooth <- smoothing(picture_list[which.max(best_image)], intensity)
peaks <- localMaxima(crop_smooth)
valleys <- localMinima(crop_smooth)
crop_lines <- NULL
for (i in 1:length(peaks)) {
right_ratio <- round(abs((crop_smooth[peaks[i]]-crop_smooth[min(valleys[valleys >= peaks[i]])])/(max(crop_smooth))),5)
left_ratio <- round(abs((crop_smooth[peaks[i]]-crop_smooth[max(valleys[valleys <= peaks[i]])])/(max(crop_smooth))),5)
if ((!is.na(left_ratio) & !is.na(right_ratio)) & (left_ratio > (final_ratio) & right_ratio > (final_ratio))) {
crop_lines[i] <- peaks[i]
}
}
crop_ratios <- c(crop_ratios,length(na.omit(crop_lines)))
}
return(na.omit(crop_lines))
}
crop_row_finder <- function(picutre_list, ratio, final_ratio, intensity) {
best_image <- best_rotation(picture_list,ratio,intensity)
crop_ratios <- crop_lines(picture_list, final_ratio, best_image, intensity)
return(crop_ratios)
}
grayscale()
grayscale
grayscale <- make_ExG(img_26)
grayscale
bw <- make_bw(grayscale)
blob <- blobify(bw,3)
bw
blobify <- function(image,size) {
kern3 <- makeBrush(size, shape = 'box')
open1 <- opening(image, kern3)
close1 <- closing(open1, kern3)
kern4 <- makeBrush(size + 2, shape = 'box')
open2 <- opening(close1, kern4)
close2 <- closing(open2, kern3)
open3 <- opening(close2, kern4)
close3 <- closing(open3, kern4)
final_blob <- EBImage::dilate(close3, kern3)
#as.cimg.array(final_blob[1:length(final_blob, dim = c(max(final_blob$x),max(final_blob$y)))])
return(final_blob)
}
blob <- blobify(bw,3)
blob
max(blob$x)
max(blob)
blob
dim(blob)
blob
as.cimg.array(final_blob[1:length(final_blob)], dim = c(dim(final_blob[1]), dim(final_blob[2])))
imager::as.cimg.array(final_blob[1:length(final_blob)], dim = c(dim(final_blob[1]), dim(final_blob[2])))
as.cimg.array(final_blob[1:length(final_blob)], dim = c(dim(final_blob[1]), dim(final_blob[2])))
as.cimg(final_blob[1:length(final_blob)], dim = c(dim(final_blob[1]), dim(final_blob[2])))
as.cimg(blob[1:length(blob)], dim = c(dim(blob[1]), dim(blob[2])))
dim(blob[1])
dim(blob)[1]
as.cimg(blob[1:length(blob)], dim = c(dim(blob)[1], dim(blob)[2]))
blobify <- function(image,size) {
kern3 <- makeBrush(size, shape = 'box')
open1 <- opening(image, kern3)
close1 <- closing(open1, kern3)
kern4 <- makeBrush(size + 2, shape = 'box')
open2 <- opening(close1, kern4)
close2 <- closing(open2, kern3)
open3 <- opening(close2, kern4)
close3 <- closing(open3, kern4)
final_blob <- EBImage::dilate(close3, kern3)
final_blob_cimg <- as.cimg.array(final_blob[1:length(final_blob)], dim = c(dim(final_blob)[1], dim(final_blob)[2]))
return(final_blob_cimg)
}
grayscale <- make_ExG(img_26)
bw <- make_bw(grayscale)
blob <- blobify(bw,3)
final_blob_cimg <- as.cimg(final_blob[1:length(final_blob)], dim = c(dim(final_blob)[1], dim(final_blob)[2]))
blobify <- function(image,size) {
kern3 <- makeBrush(size, shape = 'box')
open1 <- opening(image, kern3)
close1 <- closing(open1, kern3)
kern4 <- makeBrush(size + 2, shape = 'box')
open2 <- opening(close1, kern4)
close2 <- closing(open2, kern3)
open3 <- opening(close2, kern4)
close3 <- closing(open3, kern4)
final_blob <- EBImage::dilate(close3, kern3)
final_blob_cimg <- as.cimg(final_blob[1:length(final_blob)], dim = c(dim(final_blob)[1], dim(final_blob)[2]))
return(final_blob_cimg)
}
bw <- make_bw(grayscale)
blob <- blobify(bw,3)
blob
plot(blob)
class(blob)
picture_list <- rotations(blob, 45)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message=F,
warning=F
)
devtools::load_all()
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
document()
install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message=F,
warning=F
)
devtools::load_all()
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
img_grayscale <- make_ExG(img)
plot(img)
plot(img_grayscale)
black_white <- make_bw(img_grayscale)
plot(black_white)
img_blob <- blobify(black_white, 3)
plot(img_blob)
rotations_list <- rotations(img_blob, 90)
plot(rotations_list)
jagged <- as.data.frame(rotations_list[1]) %>%
select(x,y,value) %>%
group_by(x) %>%
summarise(row_threshold = mean(value))
jagged_array <- as.array(jagged$row_threshold)
plot(jagged_array, type = 'l')
smooth <- smoothing(rotations_list[1], 0.25)
plot(smooth, type = 'l')
best_img <- best_rotation(rotations_list, 0.5, 0.25)
paste("The best rotation was rotation ", best_img - 1, ".", sep = "")
plot(smoothing(rotations_list[best_img], 0.25), type = 'l')
par(mar = rep(2,4))
rotations_list <- rotations(img_blob, 90)
plot(rotations_list)
par(mar = rep(2,4))
rotations_list <- rotations(img_blob, 90)
plot(rotations_list)
par(mar = rep(2,4))
rotations_list <- rotations(img_blob, 90)
plot(rotations_list)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message=F,
warning=F
)
devtools::load_all()
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
img_grayscale <- make_ExG(img)
plot(img)
plot(img_grayscale)
black_white <- make_bw(img_grayscale)
plot(black_white)
img_blob <- blobify(black_white, 3)
plot(img_blob)
par(mar = rep(2,4))
rotations_list <- rotations(img_blob, 90)
plot(rotations_list)
check()
build_vignette()
build_vignettes()
build_vignettes('crop-row-processing')
build_vignettes('vignettes')
check()
library(devtools)
check()
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('crop.row.finder/inst/images/before_row.JPG')
context("Image ExG and Binarization")
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('crop.row.finder/inst/images/before_row.JPG')
img_grayscale <- make_ExG(img)
test_that("image is not a single channel", {
expect_equal(length(dim(img_grayscale)), 2)
})
test_that("otsu binarization", {
expect_equal(length(unique(black_white[1:length(black_white)])), 2)
install()
img <- load.image('crop.row.finder/inst/images/before_row.JPG')
img <- load.image('inst/images/before_row.JPG')
context("Image ExG and Binarization")
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('inst/images/before_row.JPG')
img_grayscale <- make_ExG(img)
test_that("image is not a single channel", {
expect_equal(length(dim(img_grayscale)), 2)
})
test_that("otsu binarization", {
expect_equal(length(unique(black_white[1:length(black_white)])), 2)
})
img <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
img <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
img <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
img <- load.image('https://www.dripworks.com/media/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/d/r/driptaperowcrop_large.jpg')
context("Image ExG and Binarization")
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('https://upload.wikimedia.org/wikipedia/commons/3/3b/Crop_Rows_-_geograph.org.uk_-_656084.jpg')
context("Image ExG and Binarization")
library(crop.row.finder)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- imager::load.image('https://upload.wikimedia.org/wikipedia/commons/3/3b/Crop_Rows_-_geograph.org.uk_-_656084.jpg')
library(devtools)
document()
install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message=F,
warning=F
)
devtools::load_all()
devtools::load_all()
library(CropDectectR)
library(imager)
library(magick)
library(ggplot2)
library(dplyr)
library(reshape2)
library(EBImage)
img <- load.image('C:/Users/Nico/Desktop/UNOwork/img_26.JPG')
img_grayscale <- make_ExG(img)
plot(img)
plot(img_grayscale)
black_white <- make_bw(img_grayscale)
plot(black_white)
img_blob <- blobify(black_white, 3) # min input value of 1
plot(img_blob)
par(mar = rep(2,4))
rotations_list <- rotations(img_blob, 90)
plot(rotations_list)
jagged <- as.data.frame(rotations_list[1]) %>%
select(x,y,value) %>%
group_by(x) %>%
summarise(row_threshold = mean(value))
jagged_array <- as.array(jagged$row_threshold)
plot(jagged_array, type = 'l')
smooth <- smoothing(rotations_list[1], 0.25)
plot(smooth, type = 'l')
best_img <- best_rotation(rotations_list, 0.5, 0.25)
paste("The best rotation was rotation ", best_img - 1, ".", sep = "")
plot(smoothing(rotations_list[best_img], 0.25), type = 'l')
picture_list <- rotations_list
crop_rows <- crop_row_finder(rotations_list, 0.5, 0.05, 0.25)
plot(smoothing(rotations_list[best_img], 0.25), type = 'l')
abline(v = crop_rows, col = "red")
plot(img)
abline(v = crop_rows, col = "red", lwd = 1.5)
library(devtools)
document()
install()
document()
install()
library(devtools)
document()
install()
install()
